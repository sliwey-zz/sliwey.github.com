<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Sliwey's Blog]]></title>
  <subtitle><![CDATA[积跬步以至千里，积小流以成江海]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://qianliwei.com/"/>
  <updated>2015-05-25T13:05:14.000Z</updated>
  <id>http://qianliwei.com/</id>
  
  <author>
    <name><![CDATA[sliwey]]></name>
    <email><![CDATA[qlw1009@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于React+NodeJs+MongoDB的简易留言板(三)]]></title>
    <link href="http://qianliwei.com/2015/03/01/react-msgboard-3/"/>
    <id>http://qianliwei.com/2015/03/01/react-msgboard-3/</id>
    <published>2015-03-01T04:47:32.000Z</published>
    <updated>2015-05-25T13:05:14.000Z</updated>
    <content type="html"><![CDATA[<p>发现从去年年底那会开始，React被提到的次数越来越多了，相关的文章也看到很多，看来大神们的预测还是很准的，React在国内终于真的火了。相信大家都对React有了一定的了解，我也就不多做介绍了，简单来说React是个专注于UI层的库，毕竟官网也是这么介绍的嘛，主要的特点就是虚拟DOM(virtual DOM)和单项数据流(one-way data flow)，更多内容可以去看官网<a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a>。</p>
<h2 id="快速入门">快速入门</h2><p>先简单介绍下React的写法，秉着show me code的原则，先上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"lib/js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"lib/js/JSXTransformer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/jsx"</span>&gt;</span><span class="openscad"></span><br><span class="line">        React.<span class="built_in">render</span><span class="params">(</span><br><span class="line">            &lt;p&gt;Hello React&lt;/p&gt;,</span><br><span class="line">            document.getElementById<span class="params">('container')</span></span><br><span class="line">        )</span>;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/2015030101.jpg" alt=""></p>
<p>第一次看到这段代码肯定会觉得很奇怪，既不像JS也不像HTML，到底是什么写法？这就是所谓的<a href="http://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">JSX</a>啦。那它是怎么跑起来的呢？且仔细看script标签的type属性，值为<code>text/jsx</code>，再看引入的脚本中有个叫<code>JSXTransformer.js</code>的，显而易见，这个js就是查找<code>type=&quot;text/jsx&quot;</code>的脚本把其中用JSX写的代码转换成符合JS语法的代码，也就是做了一个“翻译”的工作。</p>
<p>那么问题来了，既然仅仅只是翻译，把这玩意儿搬到线上来做总是不太合适的，增加了连接数不说，单单翻译也是要时间的嘛(不要问我“单单”是谁)。这个必须不能忍啊，但是不用慌，Facebook那帮人早就替我们考虑到了，只要下载个工具就好了，当然需要有npm(不知道npm的前端不是好攻城狮)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install react-tools -g</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">下载完后，输入命令： </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">jsx --watch src/ build/</span><br></pre></td></tr></table></figure>
<p>这样就会把<code>src</code>文件夹下的用了JSX语法的js文件哐当哐当翻译成JS语法js文件并保存在<code>build</code>文件夹下，并且实时监听。现在我们就可以把之前的那段代码改成这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"lib/js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"build/js/helloreact.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/2015030101.jpg" alt=""></p>
<p>到这里可能有些人可能还会有一个疑问，那就是为什么要用JSX来写，我直接用JS写不行吗？答案是当然可以。但是(当然会有“但是”^_^)，在决定这么做之前，先比较下两种写法的区别：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSX</span></span><br><span class="line">React.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="title">p</span>&gt;</span>,</span><br><span class="line">    document.getElementById('container')</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//JS</span><br><span class="line">React.render(</span><br><span class="line">    React.createElement("p", null, "Hello React"),</span><br><span class="line">    document.getElementById('container')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>JSX可以让你用更贴近HTML的方式来写代码，看起来会比较直观，而且代码量更少，相较之下我个人还是比较喜欢用JSX这种方式，特别是代码量大了以后这个优势会更加明显，再加上学习成本不高，掌握起来也是比较方便的。</p>
<p>接下来就是本次项目的最后一步了，用React完成一个留言板。其实我是基于<a href="http://facebook.github.io/react/docs/tutorial.html" target="_blank" rel="external">官方教程</a>来写的，代码跟教程中给出的基本差不多，我只是把服务端也搭了下(怎么搭都写在前两篇文章里了)，让整个流程能够完整走完。这篇文章本来是想把官方教程翻译一下再加点自己的理解，因为那时国内相关资源比较少，但是拖到现在发现国内已经有很多相关资源了，这种入门教程我觉得就没什么太大意义了，所以就不继续写下去了（其实就是自己懒o(╯□╰)o），具体代码可以看<a href="https://github.com/sliwey/ReactMsgBoard" target="_blank" rel="external">这里</a>。</p>
<h2 id="关于React">关于React</h2><p>最后说说我个人对React的一些想法吧，我是去年10月份那会儿参加<a href="http://www.imooc.com/learn/221" target="_blank" rel="external">D2</a>时听<a href="http://weibo.com/kejunz" target="_blank" rel="external">@张克军</a>的分享才对前端组件化有了比较深刻的理解（这里歪一下，D2还真是值得参加，虽然不一定听得懂大牛们分享的内容，但是至少能知道大牛们正在研究的方向，自己能作为借鉴参考，下次有机会再去长长见识），回来后才接触到React这个库，然后才慢慢的写了这个小项目，但是也没有很深入的研究过，只是知道点皮毛。后来工作中用到了Angular，就又去学Angular了，很多人都拿Angular和React来作比较（我个人认为这是不合理的，因为这两个根本就不是同一个层次的东西），网上也有很多这方面的文章，所以关于性能什么的比较我就不说了，就简单说说自己的使用感受吧。</p>
<p>Angular毕竟是一个框架，框架就是一个大而全的东西，包罗万象，你只能按照框架所给出的规则来写代码，基本上无法突破一些限定，所以学习成本比较高，学习曲线也比较陡峭。好处就是一旦掌握之后，使用起来会很方便，开发会很迅速(此时学习曲线就会比较平缓，但是要想精通就又是一条陡峭的曲线，不过这一点所有东西都一样，要想精通都不容易，并不仅仅只是Angular)。缺点也比较明显，就是太“重”，想要在原来的基础上换用别的框架基本不可能，只能推翻重来。</p>
<p>而React是一个库，只是负责UI，与其他环节耦合度不高，比较灵活，要是在此基础上做一次封装，暴露常用接口，如果封装的好，切换库基本上是无痛的。</p>
<p>其实对于我来说，Angular和React给我感受最深的一点就是，Angular是在HTML里写JS，而React是在JS里写HTML，到底哪个好也没个定论，见仁见智吧。我自己是比较偏向于React的方式，在HTML中写JS就像以前在JSP中写JSTL一样，让HTML显得很臃肿，不是很喜欢。</p>
<p>前不久Facebook又推出了React Native，这个真是被惊艳到了，不知道什么时候可以体验下，照这样发展下去JS是要一统江湖的节奏啊2333333…</p>
<p>不知不觉扯了这么多，这次就先到这吧，以后还是要常督促自己，多写写博客，Fighting！</p>
<blockquote>
<p>本文为原创文章，如有不足之处欢迎批评指正。<br>欢迎转载，转载请注明源地址：<a href="http://qianliwei.com/2015/03/01/react-msgboard-3/">qianliwei.com/2015/03/01/react-msgboard-3/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>发现从去年年底那会开始，React被提到的次数越来越多了，相关的文章也看到很多，看来大神们的预测还是很准的，React在国内终于真的火了。相信大家都对React有了一定的了解，我也就不多做介绍了，简单来说React是个专注于UI层的库，毕竟官网也是这么介绍的嘛，主要的特点就]]>
    </summary>
    
      <category term="MongoDB" scheme="http://qianliwei.com/tags/MongoDB/"/>
    
      <category term="NodeJs" scheme="http://qianliwei.com/tags/NodeJs/"/>
    
      <category term="React" scheme="http://qianliwei.com/tags/React/"/>
    
      <category term="长点见识" scheme="http://qianliwei.com/categories/%E9%95%BF%E7%82%B9%E8%A7%81%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于React+NodeJs+MongoDB的简易留言板(二)]]></title>
    <link href="http://qianliwei.com/2015/01/10/react-msgboard-2/"/>
    <id>http://qianliwei.com/2015/01/10/react-msgboard-2/</id>
    <published>2015-01-10T05:30:32.000Z</published>
    <updated>2015-05-25T13:05:14.000Z</updated>
    <content type="html"><![CDATA[<p>上一篇我们已经用NodeJs实现了一个简易的应用服务器，可以访问静态资源以及处理GET和POST请求了。那么接下来就是对接收到的数据进行持久化了，也就是说得找个数据库存下接收到的数据，以便之后的读取。我选择了MongoDB，至于为什么，就是因为之前没用过想试试看嘛:)</p>
<h2 id="MongoDB的安装和配置">MongoDB的安装和配置</h2><p>本来不想写这一节的，因为网上有很多相关资料，但是写这篇文章前发现自己电脑上没装过MongoDB，下载完后又忘了怎么配置，又得去网上翻，索性还是搬运过来好了，下次找起来也方便点。以下的安装和配置都是Windows平台的，Mac高富帅们只能自己去网上找找Mac版的了:)</p>
<p>下载不必多说，去<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">MongoDB官网</a>下载对应版本即可。安装完后，开始配置MongoDB服务。</p>
<p>假设安装路径为<code>D:\MongoDB</code>，首先在<code>D:\MongoDB</code>下新建个<code>data</code>文件夹，再在<code>data</code>文件夹下新建一个<code>db</code>文件夹，用来存放相应的数据库数据。</p>
<p>打开CMD，<code>cd</code>到<code>D:\MongoDB\bin</code>，输入<code>mongod.exe --dbpath=d:\MongoDB\data\db</code>来启动服务，如果提示需要<code>--rest</code>启动，那么就加上<code>rest</code>参数：<code>mongod.exe --rest --dbpath=d:\MongoDB\data\db</code>。<br><em>ps:我之前在公司进行到这一步的时候需要带rest参数，这次在家里试没带rest参数也成功了。</em></p>
<p>接下来将MongoDB服务设置成Windows服务，并加上日志。先在<code>data</code>文件夹下新建<code>log</code>文件夹，在<code>log</code>文件夹中新建<code>log.log</code>文件。在CMD中输入<code>mongod --dbpath=d:\MongoDB\data\db --logpath=d:\MongoDB\data\log\log.log --install</code>。</p>
<p>新开一个CMD，<code>cd</code>到<code>D:\MongoDB\bin\</code>,输入<code>mongo</code>进行连接测试，成功后就都搞定了。</p>
<p>最后还需要一款MongoDB的图形化管理工具，MongoDB官方推荐了几款(<em>ps:官方推荐的那个链接找不到了，找到了再补上。</em>)，从中选款喜欢的就行。入前端之前，我也算是个半吊子的Java程序猿，所以我就选了用Java写的<a href="http://edgytech.com/umongo/" target="_blank" rel="external">UMongo</a>，就是这么任性:)这款工具使用起来还是很简单的，下载完解压运行连接，一切搞定。</p>
<h2 id="用NodeJs操作MongoDB">用NodeJs操作MongoDB</h2><p>首先用npm安装MongoDB的NodeJs驱动：<br><code>npm install mongodb --save</code></p>
<p>在上一篇文章的基础上，新建<code>db.js</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.js</span></span><br><span class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"mongodb://localhost:27017/msgBoard"</span>;</span><br><span class="line"><span class="keyword">var</span> documentName = <span class="string">"msg"</span>;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">    MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, db</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> collection = db.collection(documentName);</span><br><span class="line"></span><br><span class="line">            collection.insert(data, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"insert success!!"</span>);</span><br><span class="line">                    callback &amp;&amp; callback(result);</span><br><span class="line">                    db.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">exports.save = save;</span><br></pre></td></tr></table></figure></p>
<p>首先我们对外<code>exports</code>出<code>save</code>方法，<code>save</code>方法接收两个参数：<code>data</code>和<code>callback</code>，<code>data</code>是要插入数据库的数据，<code>callback</code>就是插入操作完成后的回调函数。</p>
<p>接下来看怎么把数据插入到数据库中，我们用了<code>MongoClient.connect()</code>这个方法来建立起与数据库之间的连接，url中的<code>mongodb://localhost:27017/</code>为MongoDB服务器的地址，<code>27017</code>是默认端口，<code>msgBoard</code>可以看作是关系型数据库中的数据库名，而<code>msg</code>可以当作关系型数据库中的表。连接建立完成后，就可以通过<code>collection.insert()</code>来进行插入操作。</p>
<p>最后我们把<code>requestHandlers.js</code>中的<code>save</code>方法做些改变，让其能够把接收到的数据存入数据库：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestHandlers.js</span></span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    </span><br><span class="line">    request.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        str += <span class="built_in">decodeURIComponent</span>(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">   </span><br><span class="line">    request.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> param = querystring.parse(str);</span><br><span class="line">   </span><br><span class="line">        db.save(param, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;);</span><br><span class="line">            response.write(util.format(<span class="string">'%j'</span>, result));</span><br><span class="line">            response.end();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure></p>
<p>OK，启动应用，访问<code>http://localhost:8888/index.html</code>：</p>
<p><img src="/images/2015011001.jpg" alt=""></p>
<p>点击“提交”</p>
<p><img src="/images/2015011002.jpg" alt=""></p>
<p>这个返回的就是我们提交的数据在MongoDB中保存的格式，<code>_id</code>是MongoDB用以区分数据的唯一编码。那么，数据是不是真的已经存进数据库了呢？用UMongo查看下：</p>
<p><img src="/images/2015011003.jpg" alt=""></p>
<p>这条就是我新添加的数据，好了，一切正常，搞定！</p>
<h2 id="结束语">结束语</h2><p>关于NodeJs对MongoDB的操作，我就介绍到这了，因为此次项目要用到的API都比较简单，更多信息可以查看<a href="http://mongodb.github.io/node-mongodb-native/2.0/api-docs/" target="_blank" rel="external">官方文档</a>。</p>
<p>感觉自己写的比较乱，各位将就着看下吧:)</p>
<p><strong>参考资料：</strong><br><a href="http://www.cnblogs.com/whoamme/p/3461088.html" target="_blank" rel="external">Win7下安装MongoDB——博客园-WhoAmMe</a><br><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="external">Install MongoDB on Windows</a></p>
<blockquote>
<p>本文为原创文章，如有不足之处欢迎批评指正。<br>欢迎转载，转载请注明源地址：<a href="http://qianliwei.com/2015/01/10/react-msgboard-2/">qianliwei.com/2015/01/10/react-msgboard-2/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇我们已经用NodeJs实现了一个简易的应用服务器，可以访问静态资源以及处理GET和POST请求了。那么接下来就是对接收到的数据进行持久化了，也就是说得找个数据库存下接收到的数据，以便之后的读取。我选择了MongoDB，至于为什么，就是因为之前没用过想试试看嘛:)</p]]>
    </summary>
    
      <category term="MongoDB" scheme="http://qianliwei.com/tags/MongoDB/"/>
    
      <category term="NodeJs" scheme="http://qianliwei.com/tags/NodeJs/"/>
    
      <category term="React" scheme="http://qianliwei.com/tags/React/"/>
    
      <category term="长点见识" scheme="http://qianliwei.com/categories/%E9%95%BF%E7%82%B9%E8%A7%81%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于React+NodeJs+MongoDB的简易留言板(一)]]></title>
    <link href="http://qianliwei.com/2014/12/04/react-msgboard-1/"/>
    <id>http://qianliwei.com/2014/12/04/react-msgboard-1/</id>
    <published>2014-12-04T01:46:32.000Z</published>
    <updated>2015-05-25T13:05:14.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>先放出这次小项目的最后效果：<a href="http://sliwey.duapp.com/index.html" target="_blank" rel="external">http://sliwey.duapp.com/index.html</a><br>源码地址：<a href="https://github.com/sliwey/ReactMsgBoard" target="_blank" rel="external">https://github.com/sliwey/ReactMsgBoard</a></p>
</blockquote>
<p>这算是这段时间的学习总结，所以还是按照我的实际学习情况一步步来。我的学习时间线是NodeJs-&gt;MongoDB-&gt;React，于是我在标题后面加了个“(一)”，所以这篇也可以看做是“NodeJs篇”。</p>
<p>NodeJs已经不是什么新东西了，现在还不知道NodeJs的前端肯定不是好设计师，所以关于NodeJs的介绍和安装什么的我也就不赘述了，而深入的嘛，我也不知道，so…直接进入主题吧，不过进入主题前，得先明确下目标，本次的目标是用NodeJs实现一个动态服务器(或者叫应用服务器？)。</p>
<p>既然要实现的是一个动态服务器，那么我们先从静态服务器开始，关于NodeJs静态服务器的搭建可以看朴灵大大在11年的文章<a href="http://www.infoq.com/cn/news/2011/11/tyq-nodejs-static-file-server" title="Node.js静态文件服务器实战" target="_blank" rel="external">Node.js静态文件服务器实战</a>，只要看到<strong>MIME类型支持</strong>就可以了，对于本次项目，这些内容已经足够，后面的内容感兴趣的可以继续研究。</p>
<p>按照朴大大的代码，运行后，输入url，你会发现命令行工具中会丢出句<code>path.exists is now called &#39;fs.exists&#39;.</code>，解决方法很明显，就是把<code>server</code>方法中的<code>path.exists</code>改成<code>fs.exists</code>。所以，现在<code>app.js</code>应该看起来像是这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    url = <span class="built_in">require</span>(<span class="string">"url"</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">"path"</span>),</span><br><span class="line">    mime = <span class="built_in">require</span>(<span class="string">"./mime"</span>).types;</span><br><span class="line">   </span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="keyword">var</span> realPath = <span class="string">"public"</span> + pathname;</span><br><span class="line">    <span class="keyword">var</span> ext = path.extname(realPath);</span><br><span class="line">   </span><br><span class="line">    ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</span><br><span class="line">    <span class="keyword">var</span> contentType = mime[ext] || <span class="string">"text/plain"</span>;</span><br><span class="line">   </span><br><span class="line">    fs.exists(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            response.writeHead(<span class="number">404</span>, &#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            response.write(pathname + <span class="string">" was not found on this server."</span>);</span><br><span class="line">            response.end();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fs.readFile(realPath, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    response.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">                        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    response.end(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                        <span class="string">'Content-Type'</span>: contentType</span><br><span class="line">                    &#125;);</span><br><span class="line">                    response.write(file, <span class="string">"binary"</span>);</span><br><span class="line">                    response.end();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server running"</span>);</span><br></pre></td></tr></table></figure>
<p>再次运行，OK，现在就能访问在<code>public</code>文件夹下的文件了，先在<code>public</code>文件夹下新建个<code>index.html</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>MsgBoard<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>保存后，在浏览器中输入<code>http://localhost:8888/index.html</code>，搞定！</p>
<p><img src="/images/2014120401.jpg" alt=""></p>
<p>接下来就是要让我们的服务器“动”起来，怎么“动”呢？就是能处理请求，访问数据库什么的了，本篇先完成处理请求的功能，至于怎么跟数据库“摩擦”，到下篇再提。</p>
<p>我们通常处理的HTTP请求都是GET或者POST方式的，所以就只简单实现对这两种请求的处理。</p>
<p>既然最终要实现的是留言板，那就就要有提交留言和显示留言的功能，那么显而易见，提交时用POST请求，拉取信息时用GET请求。那怎么处理请求呢？不要着急，在这之前，我们先重构下现在的代码，以方便之后的开发。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</span><br><span class="line"><span class="keyword">var</span> requestHandlers = <span class="built_in">require</span>(<span class="string">"./requestHandlers"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> handle = &#123;&#125;;</span><br><span class="line">handle[<span class="string">"/"</span>] = requestHandlers.start;</span><br><span class="line">handle[<span class="string">"/save"</span>] = requestHandlers.save;</span><br><span class="line">handle[<span class="string">"/list"</span>] = requestHandlers.list;</span><br><span class="line">   </span><br><span class="line">server.start(router.route, handle);</span><br></pre></td></tr></table></figure>
<p><code>app.js</code>是入口文件，在这里可以分发路由，<code>server</code>模块用来完成服务器的基本配置，<code>router</code>模块用来处理是静态文件的访问还是功能性的请求，功能性请求的具体处理方法由<code>requestHandlers</code>模块完成实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">   </span><br><span class="line">        route(handle, pathname, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure>
<p><code>server.js</code>就是简单的服务器配置，以及对<code>route</code>方法的调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">"./mime"</span>).types;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</span><br><span class="line">        handle[pathname](request, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> realPath = <span class="string">"public"</span> + pathname;</span><br><span class="line">        <span class="keyword">var</span> ext = path.extname(realPath);</span><br><span class="line">   </span><br><span class="line">        ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</span><br><span class="line">        <span class="keyword">var</span> contentType = mime[ext] || <span class="string">"text/plain"</span>;</span><br><span class="line">            </span><br><span class="line">        fs.exists(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                response.writeHead(<span class="number">404</span>, &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">                &#125;);</span><br><span class="line">                response.write(pathname + <span class="string">" was not found on this server."</span>);</span><br><span class="line">                response.end();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fs.readFile(realPath, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        response.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">                            <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                        response.end(err);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                            <span class="string">'Content-Type'</span>: contentType</span><br><span class="line">                        &#125;);</span><br><span class="line">                        response.write(file, <span class="string">"binary"</span>);</span><br><span class="line">                        response.end();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure>
<p><code>route</code>方法通过传入的<code>handle</code>和<code>pathname</code>来判断当前请求是文件访问还是功能性请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestHandlers.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"strat method"</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</span><br><span class="line">    response.write(<span class="string">"&lt;div&gt;Hello World&lt;/div&gt;"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//svae comment</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//list comments</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">exports.start = start;</span><br><span class="line">exports.save = save;</span><br><span class="line">exports.list = list;</span><br></pre></td></tr></table></figure>
<p><code>requestHandlers.js</code>中就是对各个功能性请求的处理。</p>
<p>现在，再次执行<code>node app</code>命令，在浏览器中输入<code>http://localhost:8888/</code>,就能看到<code>requestHandlers.js</code>中的<code>start</code>方法所返回的<code>Hello World</code>了。</p>
<p><img src="/images/2014120402.jpg" alt=""></p>
<p>OK，我们的重构到这就算是完成了，不过这也并不是什么最佳方案，但至少逻辑上看起来清晰了很多，完成留言板的功能是足够了。</p>
<p>接下来回答之前提出的问题上来，怎么处理请求。先从GET请求开始，众所周知，GET请求的参数是<code>url</code>中跟在<code>?</code>后面的那一串<code>key=value</code>，类似于：<code>http://www.xx.com?param1=1&amp;parma2=2</code>，那么只要处理<code>param1=1&amp;parma2=2</code>这串字符就好了。直接上代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestHandlers.js</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>),</span><br><span class="line">    util = <span class="built_in">require</span>(<span class="string">"util"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url, <span class="literal">true</span>).query;</span><br><span class="line">   </span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;);</span><br><span class="line">    response.write(util.format(<span class="string">'%j'</span>, params));</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>记得先<code>require</code>所需要的<code>url</code>模块和<code>util</code>模块，重启下，输入<code>http://localhost:8888/list?page=1</code>。</p>
<p><img src="/images/2014120403.jpg" alt=""></p>
<p>好了，接着我们处理POST请求，POST请求的参数都在请求体中，而不是直接显示在url上的，那怎么接收呢？NodeJs是事件驱动的，所以提供了<code>data</code>事件和<code>end</code>事件分别用来处理数据接收中和数据接收完成的情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestHandlers.js</span></span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">    </span><br><span class="line">    request.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        str += <span class="built_in">decodeURIComponent</span>(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">   </span><br><span class="line">    request.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> param = querystring.parse(str);</span><br><span class="line">   </span><br><span class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</span><br><span class="line">        response.write(util.format(<span class="string">'%j'</span>, param));</span><br><span class="line">        response.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>先把<code>index.html</code>中的代码稍作修改：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"/save"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"msg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启下，访问<code>http://localhost:8888/index.html</code>，在输入框中随便输入点什么：</p>
<p><img src="/images/2014120404.jpg" alt=""></p>
<p>点击“提交”</p>
<p><img src="/images/2014120405.jpg" alt=""></p>
<p>搞定，本篇文章到这基本上就已经结束了，我们用NodeJs实现了一个简易的动态服务器，迈出了这次留言板项目的第一步。</p>
<p>第一次写这么长的文章，还是蛮累的，真是好佩服那些博客产出量很高的大大。继续努力！</p>
<blockquote>
<p>本文为原创文章，如有不足之处欢迎批评指正。<br>欢迎转载，转载请注明源地址：<a href="http://qianliwei.com/2014/12/04/react-msgboard-1/">qianliwei.com/2014/12/04/react-msgboard-1/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>先放出这次小项目的最后效果：<a href="http://sliwey.duapp.com/index.html" target="_blank" rel="external">http://sliwey.duapp.com/index.html]]>
    </summary>
    
      <category term="MongoDB" scheme="http://qianliwei.com/tags/MongoDB/"/>
    
      <category term="NodeJs" scheme="http://qianliwei.com/tags/NodeJs/"/>
    
      <category term="React" scheme="http://qianliwei.com/tags/React/"/>
    
      <category term="长点见识" scheme="http://qianliwei.com/categories/%E9%95%BF%E7%82%B9%E8%A7%81%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery插件编写入门【译】]]></title>
    <link href="http://qianliwei.com/2014/08/09/jQuery-plugin-beginning/"/>
    <id>http://qianliwei.com/2014/08/09/jQuery-plugin-beginning/</id>
    <published>2014-08-09T10:01:06.000Z</published>
    <updated>2015-05-29T14:02:54.000Z</updated>
    <content type="html"><![CDATA[<p>先贴上原文地址：<a href="http://learn.jquery.com/plugins/basic-plugin-creation/" target="_blank" rel="external">How to Create a Basic Plugin</a><br>英文好的就去看原文吧，我这英语四级的渣渣水平，如有译的不好的地方，请各位看官多多包涵，欢迎批评指正。<br>下面是正文，各位将就着看吧^_^</p>
<hr>
<p>有时候，你想用代码实现一个能够使用的功能。举个栗子，可能你想要一个单一的方法去调用一个jQuery选择器并且对其进行一系列的操作。也可能你写了一个非常有用的工具函数，然后你想把它方便地移植到其他项目当中。当你遇到这些情况时，是时候写个插件了，骚年！</p>
<h2 id="jQuery是怎样工作的：jQuery对象方法和工具方法">jQuery是怎样工作的：jQuery对象方法和工具方法</h2><p>在我们开始写自己的插件之前，我们必须先简单了解一下jQuery是怎样工作的。看下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">"a"</span> ).css( <span class="string">"color"</span>, <span class="string">"red"</span> );</span><br></pre></td></tr></table></figure>
<p>这是段基础的jQuery代码，但是你知道在这背后发生了什么吗？无论什么时候你用<code>$</code>函数选择元素，都会返回一个jQuery对象。这个对象包含了所有你用过的方法（<code>.css()</code>,<code>.click()</code>等等）和所有匹配你选择器的元素。jQuery对象从<code>$.fn</code>对象中获得这些方法，这个对象（译注：指<code>$.fn</code>对象）包含了所有jQuery的对象方法，所以如果我们要写自己的方法，也要包含这些方法。</p>
<p>此外jQuery的工具方法<code>$.trim()</code>用来删除用户输入的字符串中所有的前导和后置空格。工具方法是直接依附在<code>$</code>函数本身上的方法。当你要对你获取到的DOM元素集进行一些在jQuery的API中没有提供的操作时，你可能想要去写一个工具方法插件。</p>
<p><em>感觉翻的有点乱，自己概括下：<strong>jQuery对象方法就是挂在<code>$.fn</code>上的方法，可通过<code>$(&quot;#id&quot;).yourmethod();</code>这种形式调用；工具方法就是挂在<code>$</code>上的方法，通过<code>$.yourmethod();</code>这种形式调用</strong>。</em></p>
<h2 id="基础插件编写">基础插件编写</h2><p>接下来我们要编写一个能使选取到的元素的文本颜色变为绿色的插件。我们要做的就是添加一个<code>greenify</code>函数到<code>$.fn</code>上，这样就能像其它的jQuery对象方法一样使用了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.fn.greenify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.css( <span class="string">"color"</span>, <span class="string">"green"</span> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$( <span class="string">"a"</span> ).greenify(); <span class="comment">// Makes all the links green.</span></span><br></pre></td></tr></table></figure>
<p>注意使用<code>.css()</code>，另一个方法，我们使用<code>this</code>,而不是<code>$( this )</code>。这是因为我们的<code>greenify</code>方法与<code>.css()</code>是同一个对象的方法。</p>
<h2 id="链式">链式</h2><p>现在，我们编写的插件已经能够正常工作了，但是如果想要让它在现实世界中存活下来的话，还得做点什么。jQuery有一个特性是<strong>链式</strong>，你可以对一个选择器链接上五六个操作（译注：即<code>$(&quot;#id&quot;).css(&quot;color&quot;,&quot;blue&quot;).show();</code>这种操作）。这个特性是通过让所有的jQuery对象方法返回原始的jQuery对象来完成的(但是有一些例外，如：<code>.width()</code>无参调用时，返回的是选中元素的宽度，这时是不可链式的)。要使我们的插件方法能够被链式调用需要一行代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.fn.greenify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.css( <span class="string">"color"</span>, <span class="string">"green"</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$( <span class="string">"a"</span> ).greenify().addClass( <span class="string">"greenified"</span> );</span><br></pre></td></tr></table></figure>
<p>需要注意的是链式的概念<em>并不适用于</em>jQuery的工具方法，比如：<code>.trim()</code>。</p>
<p><strong><em>链式是挺重要的一点，它可以让我们写的插件更好的融入到jQuery本身所提供的方法或者其它插件方法之中。</em></strong></p>
<h2 id="保护$别名和添加作用域">保护$别名和添加作用域</h2><p><code>$</code>变量在JavaScript库中非常常用，所以如果你在使用jQuery的同时还使用别的库，你就会通过<code>jQuery.noConflict()</code>来使jQuery不使用<code>$</code>（译注：即释放jQuery对<code>$</code>变量的控制，能使其它使用<code>$</code>变量的库正常工作）。然而，这会破坏我们的插件，因为我们是基于<code>$</code>是jQuery的别名这一假设上进行编写的。为了使我们的插件能够与其它插件一起使用，并且仍然用<code>$</code>来做jQuery的别名，我们需要把代码放到一个<a href="http://stage.learn.jquery.com/javascript-101/functions/#immediately-invoked-function-expression-iife" target="_blank" rel="external">立即调用的函数表达式</a>中，然后传递<code>jQuery</code>，并把参数定义为<code>$</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $.fn.greenify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.css( <span class="string">"color"</span>, <span class="string">"green"</span> );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.ltrim = <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.replace( <span class="regexp">/^\s+/</span>, <span class="string">""</span> );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.rtrim = <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.replace( <span class="regexp">/\s+$/</span>, <span class="string">""</span> );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br></pre></td></tr></table></figure>
<p>此外，立即调用函数的主要目的是允许我们拥有自己的私有变量。假设我们想要一个不同的绿色，并且我们想要把它存在一个变量中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shade = <span class="string">"#556b2f"</span>;</span><br><span class="line"></span><br><span class="line">    $.fn.greenify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.css( <span class="string">"color"</span>, shade );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br></pre></td></tr></table></figure>
<h2 id="最小化插件的足迹">最小化插件的足迹</h2><p>在写插件时只占用<code>$.fn</code>的一个接口（译注：原文为<strong>slot</strong>,意为「插槽」，但是感觉翻译成「接口」更符合平时的习惯，后面就用统一使用「接口」）是一个很好的实践。这会减少你的插件被重写的可能，以及你的插件覆盖别的插件的可能。换句话说，这样是不好的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $.fn.openPopup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Open popup code.</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.closePopup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Close popup code.</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br></pre></td></tr></table></figure>
<p>使用一个接口，用参数来控制接口的具体实现会好很多。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $.fn.popup = <span class="function"><span class="keyword">function</span>(<span class="params"> action </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( action === <span class="string">"open"</span>) &#123;</span><br><span class="line">            <span class="comment">// Open popup code.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( action === <span class="string">"close"</span> ) &#123;</span><br><span class="line">            <span class="comment">// Close popup code.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br></pre></td></tr></table></figure>
<h2 id="使用each()方法">使用<code>each()</code>方法</h2><p>典型的jQuery对象将包含任意数量的DOM元素的引用，这就是为什么jQuery对象经常被称为集合的原因。如果你想要对特定的元素做任何操作（比如获取一个data属性，计算具体的位置）那么你需要用<code>.use()</code>来遍历元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myNewPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do something to each element here.</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意，这里我们返回<code>.each()</code>的结果而不是返回<code>this</code>。因为<code>.each()</code>已经是可链式的，它会返回<code>this</code>。到目前为止，这是一个比我们做过的更好的维护可链式的方式。</p>
<h2 id="接受选项">接受选项</h2><p>随着你的插件变得越来越复杂，使你的插件可通过接受选项来自定义是一个好主意。做这个最简单的方法，特别是有很多的选项，是用对象字面量。让我们改变我们的<em>greenify</em>插件，使其接受一些选项。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $.fn.greenify = <span class="function"><span class="keyword">function</span>(<span class="params"> options </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这是拥有默认选项最简单的方法。</span></span><br><span class="line">        <span class="keyword">var</span> settings = $.extend(&#123;</span><br><span class="line">            <span class="comment">// 这些是默认选项。</span></span><br><span class="line">            color: <span class="string">"#556b2f"</span>,</span><br><span class="line">            backgroundColor: <span class="string">"white"</span></span><br><span class="line">        &#125;, options );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于settings变量来进行设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.css(&#123;</span><br><span class="line">            color: settings.color,</span><br><span class="line">            backgroundColor: settings.backgroundColor</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br></pre></td></tr></table></figure>
<p>用法示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">"div"</span> ).greenify(&#123;</span><br><span class="line">    color: <span class="string">"orange"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>color</code>的默认值<code>#556b2f</code>通过<code>$.extend()</code>被覆盖成橙色。</p>
<h2 id="放在一起">放在一起</h2><p>这是一个使用我们已经讨论过的技术完成的小插件的示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $.fn.showLinkLocation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.filter( <span class="string">"a"</span> ).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> link = $( <span class="keyword">this</span> );</span><br><span class="line">            link.append( <span class="string">" ("</span> + link.attr( <span class="string">"href"</span> ) + <span class="string">")"</span> );</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法示例:</span></span><br><span class="line">$( <span class="string">"a"</span> ).showLinkLocation();</span><br></pre></td></tr></table></figure>
<p>这个方便的插件将所有在集合中的<code>a</code>标签的内容后边插入了写在括号中的<code>href</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 调用插件之前: --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"page.html"</span>&gt;</span>Foo<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 调用插件之后: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"page.html"</span>&gt;</span>Foo (page.html)<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>我们的插件可以优化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $.fn.showLinkLocation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.filter( <span class="string">"a"</span> ).append(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">" ("</span> + <span class="keyword">this</span>.href + <span class="string">")"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;( jQuery ));</span><br></pre></td></tr></table></figure>
<p>我们使用<code>.append()</code>方法接受回调函数的能力，这个回调函数的返回值会决定追加什么到集合中的每个元素后面。另外我们也没有使用<code>.attr()</code>方法去获取<code>href</code>属性，因为本地的DOM API可以让我们用<code>href</code>轻松访问该属性。</p>
<hr>
<p>呼~~终于算是完成了，果然我这英语水平翻译起来还是有点困难啊，有些翻译出来不通顺的地方我都意译了。如果你在阅读中发现还有不通顺或难以理解的地方，欢迎指出^_^（请原谅我捉急的英语吧OTL）</p>
<p>最后，再总结下：<br>jQuery有两种方法：<strong>对象方法</strong>和<strong>工具方法</strong>。对象方法就是挂在<code>$.fn</code>上的方法，可通过<code>$(&quot;#id&quot;).yourmethod();</code>这种形式调用；工具方法就是挂在<code>$</code>上的方法，通过<code>$.yourmethod();</code>这种形式调用。<strong>因为我们写的插件一般都会操作DOM元素，所以插件都会挂在<code>$.fn</code>上，即用第一种形式，使之成为jQuery的对象方法。</strong><br>注意点：</p>
<ul>
<li>插件方法应返回<code>this</code>，使之能够链式编写。</li>
<li>对外提供的接口应尽量少，即减少挂在<code>$.fn</code>上的函数。</li>
<li>要能接受选项，以提供自定义功能。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>先贴上原文地址：<a href="http://learn.jquery.com/plugins/basic-plugin-creation/" target="_blank" rel="external">How to Create a Basic Plugin</a><]]>
    </summary>
    
      <category term="jQuery" scheme="http://qianliwei.com/tags/jQuery/"/>
    
      <category term="胡乱一翻" scheme="http://qianliwei.com/categories/%E8%83%A1%E4%B9%B1%E4%B8%80%E7%BF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://qianliwei.com/2014/08/07/Hello-World/"/>
    <id>http://qianliwei.com/2014/08/07/Hello-World/</id>
    <published>2014-08-07T12:40:07.000Z</published>
    <updated>2015-05-25T13:05:14.000Z</updated>
    <content type="html"><![CDATA[<p>进入这行后，一直以来就想建个个人网站，或总结下学习心得，或实践下新学的前端技术，偶尔也能卖卖萌^_^。但是却一直纠结于采用什么技术来完成这个网站，今年年初还在杭州实习的时候，因为用的是Java，所以用SSH搭了个简单框架，但是在实现了留言板的功能后，阴差阳错下对微信公众平台的开发起了兴趣，于是这个站就这么搁浅了。</p>
<p>说到这个微信公众号，有个比较好玩的地方。因为我把公众号的后台程序放到了<a href="http://sae.sina.com.cn/" target="_blank" rel="external">SAE</a>上，后来机缘巧合下，混到个「中级开发者」，从此麻麻再也不用担心我的云豆啦~~（不过现在都没怎么用SAE了╮(╯▽╰)╭ ）</p>
<p>之后就一直忙着毕业的各种事情，也没时间去搞个站了。毕业后，入了前端这个「坑」，抱着「要是能把平时见到的酷炫的效果有机地结合起来放到自己的网站上，那该多酷啊！」的这种想法，又屁颠屁颠地想去搞个网站了。这次选择的是大名鼎鼎的WordPress,因为SAE上可以直接安装WordPress,于是就在SAE上建了个，但是发现想要更加自由地自定义主题，还得学点PHP，觉得有点麻烦，就再次放弃了OTL</p>
<p>最后的最后，在机缘巧合之下，<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>这个神奇的东西，就像是有位「白富美」把一堆钱「啪」一下甩在了我的脸上，让我瞬间就对她一见钟情了^_^。引用其官方的话来形容：</p>
<blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.   </p>
</blockquote>
<p>简单来说，Hexo就是个「快简强」的博客框架，能让你分分钟搭建属于你自己的博客。在Node环境下，只要几秒钟，就能完成博客的<strong>静态化</strong>，什么是静态化呢？就是你的站点文件均是静态资源，也就是只有HTML、CSS、JS这些，没有像JSP、PHP这些动态脚本，好处就是访问速度变化快啦、服务器压力小啦、能更好的被搜索引擎收录等等。详细了解可以看下这个：<a href="http://baike.baidu.com/view/2510440.htm?fr=aladdin" target="_blank" rel="external">动态页面静态化——百度百科</a>。</p>
<p>当然，作为一个博客框架，怎能不支持<strong>Markdown</strong>呢。这又是一个神奇的东西，实乃写文章之利器啊——<a href="http://baike.baidu.com/view/2311114.htm?fr=aladdin" target="_blank" rel="external">我是百度百科的传送门</a>。</p>
<p>好了，流水账记完了，该说说这个博客的用途了。这个博客主要用来总结学习所得，统一之后个人作品的入口，尽可能多的把学到的用到这个站上面来，会用HTML5和CSS3的东西，所以兼容性什么的就只能呵呵了。反正目标受众也大多是同行，我想作为同行的你，不至于在用IE678吧？所以，IE9以下的就不考虑了（要是你真在用，赶快换Chrome吧！！），其实有些特性貌似IE9也不支持，所以还是得再次啰嗦一句「快点用Chrome啊！！干掉IE啊！！」（纯属个人吐槽，利益相关请略过）。</p>
<p>废话了一堆，不知道在说些什么，就写到这吧。如果有Hexo方面的问题，可以留言交流探讨。由于<strong>About</strong>页面还在酝酿中，就在这留个简单的联系方式：  </p>
<ul>
<li>邮箱：qlw1009@gmail.com</li>
<li>QQ: 469030550</li>
<li>GitHub:<a href="https://github.com/sliwey" target="_blank" rel="external">https://github.com/sliwey</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>进入这行后，一直以来就想建个个人网站，或总结下学习心得，或实践下新学的前端技术，偶尔也能卖卖萌^_^。但是却一直纠结于采用什么技术来完成这个网站，今年年初还在杭州实习的时候，因为用的是Java，所以用SSH搭了个简单框架，但是在实现了留言板的功能后，阴差阳错下对微信公众平台]]>
    </summary>
    
      <category term="随笔" scheme="http://qianliwei.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>